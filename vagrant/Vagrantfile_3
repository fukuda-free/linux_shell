
system 'vagrant plugin install vagrant-multiplug' unless Vagrant.has_plugin?('vagrant-multiplug')

# 仮想環境を利用するツールを設定
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

Vagrant.configure('2') do |config|
  # インストールするOSを設定
  config.vm.box = 'centos/7'

  # 他で使うプラグインをインストール（「vagrant-multiplug」が無いと動かない）
  if Vagrant.has_plugin?('vagrant-multiplug')
    config.plugin.add_dependency  'vagrant-vbguest'
    config.plugin.add_dependency  'vagrant-disksize' # HDDの容量を変更できる
    config.plugin.add_dependency  'vagrant-winnfsd'
    config.plugin.add_dependency  'vagrant-bindfs'
    config.plugin.add_dependency  'vagrant-rsync-back'
    config.plugin.add_dependency  'vagrant-unison2'
    config.plugin.add_dependency  'vagrant-cachier'
    config.plugin.add_dependency  'vagrant-hostsupdater' # hosts設定ができる（ホストOSのみ）
    config.plugin.add_dependency  'vagrant-hostmanager' # hosts設定ができる（ホストOS、ゲストOS できる）
    config.plugin.add_dependency  'vagrant-docker-compose' # docker関係をインストールしてくれる
    config.plugin.add_dependency  'vagrant-cachier'
    config.plugin.add_dependency  'vagrant-gatling-rsync' # rsyncを高速化するプラグインvagrant-gatling-rsync
    config.plugin.add_dependency  'vagrant-auto_network' # ネットワークを自動割り当てに


    # プラグイン別の設定
    config.cache.scope = :box if Vagrant.has_plugin?('vagrant-cachier')
    if Vagrant.has_plugin?('vagrant-gatling-rsync')
      config.gatling.latency = 0.2
      config.gatling.time_format = '%H:%M:%S'
      config.gatling.rsync_on_startup = false
    end
    if Vagrant.has_plugin?('vagrant-hostmanager')
      config.hostmanager.enabled = true
      config.hostmanager.manage_host = true
      config.hostmanager.ignore_private_ip = false
      config.hostmanager.include_offline = false
      config.vm.hostname = 'fjets.local'
    end
  end

  # IPアドレス割り当ての自動化(DHCP)
  config.vm.network :private_network, :auto_network => true, auto_correct: true

  # ポートフォワードの自動化
  config.vm.network :forwarded_port, guest: 22, host: 2222, id: 'ssh', auto_correct: true
  # config.vm.network :forwarded_port, guest: 80, host: 80
  # config.vm.network :forwarded_port, guest: 443, host: 443

  # ブリッジアダプター（DHCPによってIPアドレスを割当）=>他からも見れるように
  # config.vm.network :public_network
  config.vm.network :public_network, bridge: 'Realtek USB GbE Family Controller', auto_correct: true

  # docker install
  config.vm.provision :docker
  config.vm.provision :docker_compose
  # config.vm.provision 'shell', inline: <<-DOCKER_SHELL
  #     chmod +x /usr/local/bin/docker-compose
  #     find /usr/lib/systemd/system/docker.service -type f -print | xargs sed -i -e "s*ExecStart=/usr/bin/dockerd*ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375*g"
  #     echo export DOCKER_HOST=tcp://127.0.0.1:2375 >> .bashrc
  #     systemctl start docker
  #     systemctl enable docker
  # DOCKER_SHELL

  # サーバー設定
  config.disksize.size = '50GB'
  config.vm.boot_timeout = 100
  config.vm.provider 'virtualbox' do |vb|
    vb.name = 'jets'
    vb.gui = false
    vb.customize ['modifyvm', :id, '--cpus', '1']
    vb.customize ['modifyvm', :id, '--memory', '2048']
    # ssh用
    vb.customize ['modifyvm', :id, '--cableconnected1', 'on']
    # Virtualbox 上でNATしていてゲストOS上で名前解決ができない場合にVagrant ファイルでする設定
    vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
  end

  # 共有フォルダ
  # config.vm.synced_folder "./rails", "/var/www/rails",
  #   create: true,
  #   disabled: false ,
  #   mount_options: ['dmode=777','fmode=755']
  # config.winnfsd.uid = 1000
  # config.winnfsd.gid = 1000

  # shell
  config.vm.provision 'shell', inline: <<-CENTOS_PLUGIN
  # vim install
  sudo yum -y install vim wget "ImageMagick" ImageMagick ImageMagick-devel

  # timezoneをAsia/Tokyoに変更
  sudo timedatectl set-timezone Asia/Tokyo

  # 開発パッケージ
  wget https://raw.githubusercontent.com/fukuda-free/linux_shell/develop/centOS7/develop_package_install.sh
  . develop_package_install.sh

  # 開発環境として利用する場合、ファイアウォールを無効
  sudo systemctl stop firewalld
  sudo systemctl disable firewalld

  # yum管理の各種ソフトウェアをアップデート
  yum -y update

  # 鍵なしでSSHできるように
  sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
  service ssh restart
  systemctl status sshd.service
  sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config

  # ruby install(2.4 or 2.5 or 2.6 or 自由)
  wget https://raw.githubusercontent.com/fukuda-free/linux_shell/develop/centOS7/ruby_on_rbenv_install.sh
  . ruby_on_rbenv_install.sh 2.5
  # rbenv install -v 2.5.3
  # rbenv rehash
  # rbenv global 2.5.3

  # node install(8 or 9 or 10 or 11 or 12)
  wget https://raw.githubusercontent.com/fukuda-free/linux_shell/develop/centOS7/node_on_nvm_install.sh
  . node_on_nvm_install.sh 12

  # mysql install(57 or 80)
  wget https://raw.githubusercontent.com/fukuda-free/linux_shell/develop/centOS7/develop_mysql_install.sh
  . develop_mysql_install.sh 57

  # wget https://raw.githubusercontent.com/fukuda-free/linux_shell/develop/centOS7/docker_install.sh
  # . docker_install.sh

  CENTOS_PLUGIN

  # プロジェクトに必要なパッケージ
  config.vm.provision 'shell', inline: <<-PROJECT_PLUGIN
  mkdir /var/www
  mkdir /var/www/jets
  gem install bundler
  gem install jets
  gem install foreman
  gem install rubocop
  PROJECT_PLUGIN

  config.vm.provision 'shell', inline: <<-SETTING_CHECK
  clear
  echo 'swap'
  free
  echo ''
  echo 'git のバージョンは以下となります'
  git --version
  echo ''
  echo '現在のMYSQLのバージョンは、以下の通りです'
  mysqld --version
  echo ''
  echo 'ruby のバージョンは以下となります'
  ruby -v
  echo ''
  echo 'node.js のバージョンは以下となります'
  node -v
  echo ''
  echo 'npm のバージョンは以下となります'
  npm -v
  echo ''
  echo 'yarn のバージョンは以下となります'
  yarn -v
  echo 'docker のバージョンは以下となります'
  docker version
  echo ''
  echo 'docker-compose のバージョンは以下となります'
  docker-compose version
  echo ''
  SETTING_CHECK
end
